import pygame
import random
import sys

pygame.init()


SCREEN_WIDTH = 600
SCREEN_HEIGHT = 400
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Reigns-like Game")

LIGHT_BLUE = (173, 216, 230)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
GRAY = (200, 200, 200)
CARD_COLOR = (250, 250, 240)

font_small = pygame.font.SysFont("Arial", 12)
font_medium = pygame.font.SysFont("Arial", 14)
font_large = pygame.font.SysFont("Arial", 16)
font_xlarge = pygame.font.SysFont("Arial", 24)

class Game:
    def __init__(self):
        self.resources = {
            "Military": 5,
            "Religion": 5,
            "Economy": 5,
            "People": 5
        }
        
        self.warning_message = ""
        self.current_card = None
        self.dragging = False
        self.drag_offset = 0
        self.card_pos = [100, 100]
        self.card_size = [400, 200]  # width, height
        
        self.deck = [
            {"description": "Raise taxes to fund the military.",
             "effects": {"Military": +2, "Economy": -1, "People": -2}},
            {"description": "Build a grand temple to please the gods.",
             "effects": {"Religion": +3, "Economy": -2}},
            {"description": "Send aid to the poor.",
             "effects": {"People": +2, "Economy": -1}},
            {"description": "Declare war on a neighboring kingdom.",
             "effects": {"Military": -1, "People": -1, "Economy": -2}},
            {"description": "Hold a festival to boost morale.",
             "effects": {"People": +3, "Economy": -1}}
        ]
        
        self.game_over = False
        self.game_over_message = ""
        
        self.draw_card()
    
    def draw_card(self):
        if self.deck:
            self.current_card = random.choice(self.deck)
            self.card_pos = [100, 100]  # Reset card position
            print(f"Card drawn: {self.current_card['description']}")
        else:
            self.end_game("The deck is empty!")
    
    def update_resources(self):
        print("Resources updated:", self.resources)
        
        self.warning_message = ""
        for resource, value in self.resources.items():
            if value <= 2:
                self.warning_message += f"Warning: {resource} is too low! "
            elif value >= 8:
                self.warning_message += f"Warning: {resource} is too high! "
    
    def apply_effects(self, direction):
        if not self.current_card:
            return
            
        effects = self.current_card["effects"]
        print(f"Applying effects for {direction} swipe: {effects}")
        
        for resource, change in effects.items():
            if direction == "left":
                self.resources[resource] += change
            elif direction == "right":
                self.resources[resource] -= change
        
        for resource, value in self.resources.items():
            if value <= 0 or value >= 10:
                self.end_game(f"{resource} reached an extreme level!")
                return
        
        self.deck.append(self.current_card)
        print("Card added back to the deck")
        
        self.draw_card()
        self.update_resources()
    
    def end_game(self, message):
        self.game_over = True
        self.game_over_message = message
        print("Game Over:", message)
    
    def handle_event(self, event):
        if self.game_over:
            return
            
        if event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:  # Left mouse button
                mouse_x, mouse_y = event.pos
                if (self.card_pos[0] <= mouse_x <= self.card_pos[0] + self.card_size[0] and
                    self.card_pos[1] <= mouse_y <= self.card_pos[1] + self.card_size[1]):
                    self.dragging = True
                    self.drag_offset = mouse_x - self.card_pos[0]
        
        elif event.type == pygame.MOUSEBUTTONUP:
            if event.button == 1 and self.dragging:
                self.dragging = False
                if self.card_pos[0] > 300 + (self.card_size[0] * 0.5):
                    self.apply_effects("left")
                elif self.card_pos[0] + self.card_size[0] < 300 - (self.card_size[0] * 0.5):
                    self.apply_effects("right")
                else:  # Not swiped far enough - reset position
                    self.card_pos = [100, 100]
                    print("Card reset to center")
        
        elif event.type == pygame.MOUSEMOTION and self.dragging:
            mouse_x, mouse_y = event.pos
            self.card_pos[0] = mouse_x - self.drag_offset
    
    def draw(self, screen):
        screen.fill(LIGHT_BLUE)
        
        if self.game_over:
            text = font_xlarge.render(self.game_over_message, True, RED)
            text_rect = text.get_rect(center=(SCREEN_WIDTH//2, SCREEN_HEIGHT//2))
            screen.blit(text, text_rect)
            return
        
        y = 10
        for resource, value in self.resources.items():
            text = font_small.render(f"{resource}: {value}", True, BLACK)
            screen.blit(text, (10, y))
            y += 30
        
        if self.warning_message:
            text = font_medium.render(self.warning_message, True, RED)
            text_rect = text.get_rect(center=(SCREEN_WIDTH//2, 20))
            screen.blit(text, text_rect)
        
        pygame.draw.rect(screen, CARD_COLOR, 
                         (self.card_pos[0], self.card_pos[1], 
                          self.card_size[0], self.card_size[1]))
        pygame.draw.rect(screen, BLACK, 
                         (self.card_pos[0], self.card_pos[1], 
                          self.card_size[0], self.card_size[1]), 2)
        
        if self.current_card:
            words = self.current_card["description"].split(' ')
            lines = []
            current_line = []
            max_width = self.card_size[0] - 40  # Padding
            
            for word in words:
                test_line = ' '.join(current_line + [word])
                test_width = font_medium.size(test_line)[0]
                
                if test_width <= max_width:
                    current_line.append(word)
                else:
                    lines.append(' '.join(current_line))
                    current_line = [word]
            
            if current_line:
                lines.append(' '.join(current_line))
            
            y_offset = self.card_pos[1] + 20
            for line in lines:
                text = font_medium.render(line, True, BLACK)
                text_rect = text.get_rect(center=(SCREEN_WIDTH//2, y_offset))
                screen.blit(text, text_rect)
                y_offset += 30

        no_text = font_large.render("No", True, RED)
        yes_text = font_large.render("Yes", True, GREEN)
        screen.blit(no_text, (50, 350))
        screen.blit(yes_text, (500, 350))

def main():
    clock = pygame.time.Clock()
    game = Game()
    
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            game.handle_event(event)
        
        game.draw(screen)
        pygame.display.flip()
        clock.tick(60)
    
    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
