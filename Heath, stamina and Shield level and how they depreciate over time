import random
import time

# Class representing a looted goods that can restore health
class LootedGoods:
    def __init__(self, name, restore_health=0):
        self.name = name
        self.restore_health = restore_health

# Class representing user attack: that consits of a name, damage dealt, and stamina cost
class AttackDealt:
    def __init__(self, name, damage, stamina_cost):
        self.name = name
        self.damage = damage
        self.stamina_cost = stamina_cost

# Class representing either Player or enemy character
class Player:
    def __init__(self, name, is_player=False):
        self.name = name
        self.is_player = is_player
        self.max_health = 300
        self.health = 300
        self.max_stamina = 50
        self.stamina = 3
        self.shield = 0
        self.inventory_looted_goods = []

    # string that is used when printing the player object
    def __str__(self):
        return f"{self.name} | HP: {self.health} | Stamina: {self.stamina} | Shield: {self.shield}"

    # defining how inflicted attacks would be dealt to a target
    def inflict_attack(self, attack, desired_target):
        if self.stamina < attack.stamina_cost:
            print(f"{self.name} stamina level is insufficent for selected attack {attack.name}!")
            return

        print(f"{self.name} uses {attack.name} on {desired_target.name}!")
        self.stamina -= attack.stamina_cost
        desired_target.inflicted_attack(attack.damage)

    # defining how to handle being attacked (damage taken and shield impact logic)
    def inflicted_attack(self, damage):
        self.stamina = max(self.stamina - damage * 0.25, 0)

        if self.shield > 0:
            absorbed_damage = min(self.shield, damage)
            self.shield -= absorbed_damage
            actual_damage = damage - absorbed_damage
            print(f"{self.name}'s shield absorbed {absorbed_damage} damage.")
        else:
            actual_damage = damage

        self.health = max(self.health - actual_damage, 0)
        print(f"{self.name} took {actual_damage} damage!!")

    # Adding looted goods to player inventory
    def loot_goods(self, LootedGoods):
        self.inventory_looted_goods.append(LootedGoods)
        print(f"{self.name} looted {LootedGoods.name}.")

    # defining how player will Consume looted good by name to restore health
    def consume_looted_goods(self, looted_goods_name):
        for goods in self.inventory_looted_goods:
            if looted_goods_name.name == looted_goods_name:
                self.health = min(self.max_health, self.health + looted_goods_name.health_restore)
                self.inventory_looted_goods.remove(looted_goods_name)
                print(f"{self.name} consumed {looted_goods_name.name} (+{looted_goods_name.health_restore} health).")
                return
        print(f"{self.name} has no {looted_goods_name}.")

    # defining how the Increase of player's shield works
    def increase_shield(self, amount):
        self.shield += amount
        print(f"{self.name} icreased shield by {amount}.")

    # defining when enemy is defeated and player ca progress on
    def defeat_enemy(self, enemy):
        print(f"{self.name} defeated {enemy.name}!")
        self.increase_shield(0)
        #sheild should increase only once looted item is aquired and in inventory_looted_goods
import random  

# Represents a weapon with upgradeable attributes
class Weapon:
    def __init__(self, name, base_level_damage):
        self.name = name  
        self.base_level_damage = base_level_damage  # Base damage of the weapon
        self.attributes = []  

    # Method to add a new attribute to the weapon if it doesn't already exist
    def upgrade(self, attributes):
        if attributes not in self.attributes:
            self.attributes.append(attributes)
            print(f"{self.name} has obtained the attribute: {attributes} from opponent.")

    # String representation of the weapon for easy printing
    def __str__(self):
        attributes_list = ", ".join(self.attributes) if self.attributes else "None"
        return f"Weapon: {self.name} | Damage: {self.base_level_damage} | attributes: {attributes_list}"

# Represents a shield with strength and potential attributes
class Shield:
    def __init__(self, strength, base_level_damage=None):  # base_level_damage is not in use now
        self.strength = strength 
        self.attributes = []  

    # Method to upgrade shield's strength or add new attributes
    def upgrade(self, attributes):
        if attributes == "strength":
            self.strength += 10  
            print("Shield strength increased by 10.")
        elif attributes not in self.attributes:
            self.attributes.append(attributes)
            print(f"Shield obtained attribute: {attributes}.")

    # String representation of the shield
    def __str__(self):
        attributes_list = ", ".join(self.attributes) if self.attributes else "None"
        return f"Shield | Durability: {self.strength} | attributes: {attributes_list}"

# Represents an enemy character with lootable attributes
class Enemy:
    def __init__(self, name, health, attributes=None):
        self.name = name 
        self.health = health  
        self.attributes = attributes if attributes else []  

    # String representation of the enemy
    def __str__(self):
        return f"Enemy: {self.name} | HP: {self.health} | attributes: {', '.join(self.attributes)}"

# Player class with health, stamina, weapon, and shield
class Player:
    def __init__(self, name):
        self.name = name  
        self.max_health = 300 
        self.health = 300  
        self.max_stamina = 50  
        self.stamina = 3  
        self.shield = Shield(strength=20)  
        self.weapon = Weapon("crimson double edge Sword", base_level_damage=20)  
        self.inventory_looted_goods = [] 

    # String representation of the player showing stats, weapon, and shield
    def __str__(self):
        return f"{self.name} | HP: {self.health} | Stamina: {self.stamina}\n{self.weapon}\n{self.shield}"

     # Loots special attributes from an enemy and lets the player choose where to apply them
        def loot_enemy_attributes(self, enemy):
            print(f"{self.name} acquired special attribute(s) from {enemy.name}")
            for attribute in enemy.attributes:
                while True:
                    choice = input(f"Apply attribute '{attribute}' to weapon, sheild or armour? (w/s/a): ").strip().lower()
                    if choice == 'w':
                        self.weapon.upgrade(attribute)
                        break
                    elif choice == 's':
                        self.shield.upgrade(attribute)
                        break
                    elif choice == 'a':
                        self.armour.upgrade(attribute)
                        break
                    else:
                        print("Invalid input. Please enter 'w' for weapon or 's' for shield or 'a' for armour.")
 

    # Simulates the player defeating an enemy and looting their attributes
    def defeat_enemy(self, enemy):
        print(f"{self.name} defeated {enemy.name}!")
        self.loot_enemy_attributes(enemy)
