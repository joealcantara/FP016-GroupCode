import tkinter as tk
from random import choice
#creating a game class to be able to implement specific game attributes
class Game:
    def __init__(self, base):
        self.base = base
        self.base.title("Game")
        self.box = tk.Canvas(base, width=600, height=400, bg="lightblue")
        self.box.pack()
#giving stats for diffrent catigories in the game
        self.stats = {
            "Military": 5,
            "Religion": 5,
            "Economy": 5,
            "People": 5
        }
# implementing the text in game, what font and game values
        self.stat_value = {}
        y = 10
        for stat, value in self.stats.items():
            label = tk.Label(base, text=f"{stat}: {value}", font=("Arial", 12))
            label.place(x=10, y=y)
            self.stat_value[stat] = label
            y += 30
#giving coordinates of where game begins
        self.w_label = tk.Label(base, text="", font=("Arial", 14), fg="red")
        self.w_label.place(x=300, y=10, anchor="center")

        self.label_n = tk.Label(base, text="No", font=("Arial", 16), fg="red")
        self.label_n.place(x=50, y=350)

        self.label_y = tk.Label(base, text="Yes", font=("Arial", 16), fg="green")
        self.label_y.place(x=500, y=350)
#not sure
        self.card = None
        self.c_text = None
        self.cur_card = None
        self.start_x = None
#stating what happens when to each stat category wj=hen you undero a task
        self.deck = [
            {"description": "Raise taxes to fund the military.",
             "effects": {"Military": +2, "Economy": -1, "People": -2}},
            {"description": "Build a holy temple to please the gods.",
             "effects": {"Religion": +3, "Economy": -2}},
            {"description": "Send food aid to the poor.",
             "effects": {"People": +2, "Economy": -1}},
            {"description": "Declare war on a enemy kingdom.",
             "effects": {"Military": -1, "People": -1, "Economy": -2}},
            {"description": "Hold a big festival to celebrate your kingdom's victory.",
             "effects": {"People": +3, "Economy": -1}}
        ]
#creating game card and distributing it
        self.drw_card()

        self.box.bind("<Button-1>", self.card_c)
        self.box.bind("<B1-Motion>", self.card_d)
        self.box.bind("<ButtonRelease-1>", self.on_card_release)
#creating playing box
    def drw_card(self):
        if self.deck:
            self.cur_card = choice(self.deck)
            self.card = self.box.create_rectangle(100, 100, 500, 300, fill="white", outline="black")
            self.c_text = self.box.create_text(300, 200, text=self.cur_card["description"], font=("Arial", 14), width=380)
#updating resources
    def update_resources(self):
        for stat, value in self.stats.items():
            self.stat_value[stat].config(text=f"{stat}: {value}")
#waring message for when stats may be close to being depleted or oversaturated
        warning_message = ""
        for stat, value in self.stats.items():
            if value <= 2:
                warning_message += f"Warning: {stat} is too low! "
            elif value >= 8:
                warning_message += f"Warning: {stat} is too high! "
        self.w_label.config(text=warning_message)
#in game effects
    def apply_effects(self, direction):
        effects = self.cur_card["effects"]
        for stat, change in effects.items():
            if direction == "left":
                self.stats[stat] += change
            elif direction == "right":
                self.stats[stat] -= change
#max level of items reached
        for stat, value in self.stats.items():
            if value <= 0 or value >= 10:
                self.game_over(f"{stat} reached an extreme level!")
                return

        self.deck.append(self.cur_card)
#card drawing
        self.zero_card()
        self.drw_card()
        self.update_resources()

    def zero_card(self):
        if self.card:
            self.box.delete(self.card)
            self.box.delete(self.c_text)
#the game is over
    def game_over(self, message):
        self.box.delete("all")
        self.box.create_text(300, 200, text=message, font=("Arial", 24), fill="red")
        print("Game Over:", message)
#start the event for that card
    def card_c(self, event):
        self.start_x = event.x

    def card_d(self, event):
        if self.card:
            dx = event.x - self.start_x
            self.box.move(self.card, dx, 0)
            self.box.move(self.c_text, dx, 0)
            self.start_x = event.x

    def on_card_release(self, event):
        if self.card:
            card_x1, _, card_x2, _ = self.box.coords(self.card)
            card_width = card_x2 - card_x1

            if card_x1 > 300 + (card_width * 0.5):
                self.apply_effects("left")
            elif card_x2 < 300 - (card_width * 0.5):
                self.apply_effects("right")
            else:  # Card not swiped far enough
                self.box.coords(self.card, 100, 100, 500, 300)
                self.box.coords(self.c_text, 300, 200)

if __name__ == "__main__":
    base= tk.Tk()
    game = Game(base)
    base.mainloop()
